rpm -qa --qf '%{name} %{release}-%{version}\n'

https://blog.csdn.net/aixiaoyang168/article/details/83782336

第一步，需要梳理功能逻辑。我们要确认这个调查问卷平台需要哪些功能支持，这些功能的流程操作顺序是如何布置，然后用文字或流程图给整理出来。第二步，设计技术方案。梳理完功能逻辑后，可以根据功能逻辑的需要来选择和定制技术方案。例如问卷调查表单的实现，比较理想的技术方式是“动态表单”。但只有一个前端开发如何实现后台功能呢？最快速的方法是利用前端熟悉的 JavaScript 语言，基于 Node.js 来开发这个平台的后端服务。把这些功能逻辑逐一分成一个个技术点，再找对应技术点的具体实现方式，整合出一套技术方案。第三步，开发落地功能。根据上一步里的技术方案设计，将其中的一个个技术点逐一开发写代码实现功能，最后直至所有功能全部开发完毕。第四步，规划后续平台维护。功能代码开发完了不是一个项目的终点，项目的终点是结束历史使命下线的时候。在项目开发完成到项目下线的中间过程，我们还需要制定整体的代码维护规划，例如出现问题要如何迭代，如何增强代码的日志监控来提升排查问题效率等等。

‘NODE_ENV’ 不是内部或外部命令，也不是可运行的程序或批处理文件
windows 环境必须安装 cross-env 模块，并在启动命令前安装
npm i -D cross-env

    "scripts": {
        "dev": "cross-env NODE_ENV=development webpack serve -c ./webpack.config.js",
        "build": "cross-env NODE_ENV=production webpack -c ./webpack.config.js"
    },

《数据密集型应用系统设计》

老师, 能否加餐讲讲这篇论文 Time, Clocks, and the Ordering of Events in the Distributed System, 78年对老论文, 阐述了偏序关系, 感觉是思考分布式的鼻祖了 

https://www.notion.so/product/ai

https://time.geekbang.org/column/article/418468

有些时候，看代码并不是最快的学习方式，我往往要追根溯源，去看启发了这些开源框架的原始论文。正是因为阅读了这些论文本身，给我自己打开了一扇新世界的窗。在研读这些论文的过程中，我了解到了各个大数据系统的来龙去脉，不仅知道了系统是怎么设计的，更搞清楚了系统为什么要这样设计。在大数据的世界里，我们会使用某个开源框架，是了解到了 How，毕竟谁学上两天都可以学会。而了解了开源框架的源码，是弄明白了 What，让我们在遇到问题的时候，可以更高效地 debug。那么，研读完它背后的论文，则是搞清楚了 Why，这样，我们不仅可以参与到开源社区里，去帮助迭代改进这些框架，更可以在未来遇到新问题的时候，有更多的思路可以借鉴。

阅读论文就是去理解武功对应的“心法”，可以让你不仅仅是只学会今时今日有用，而是能做到一辈子都受益。
